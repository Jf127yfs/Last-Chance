<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Pan Analytics Race Track</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    :root {
      --track-bg: #2c3e50;
      --lane-line: #34495e;
      --grass: #27ae60;
      --finish-line: #f39c12;
      --text-gold: #f1c40f;
      --card-bg: rgba(44, 62, 80, 0.95);
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      background: linear-gradient(135deg, #1a252f 0%, #2c3e50 50%, #1a252f 100%);
      font-family: 'Courier New', monospace;
      color: #ecf0f1;
      overflow: hidden;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Header */
    .header {
      text-align: center;
      padding: 20px;
      background: rgba(0, 0, 0, 0.5);
      border-bottom: 4px solid var(--finish-line);
    }

    .header h1 {
      font-size: 36px;
      color: var(--text-gold);
      letter-spacing: 4px;
      text-shadow: 0 0 20px rgba(241, 196, 15, 0.5);
      margin-bottom: 8px;
    }

    .header .subtitle {
      font-size: 14px;
      color: #95a5a6;
      letter-spacing: 2px;
    }

    /* Race Container */
    .race-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 20px;
      gap: 15px;
      position: relative;
    }

    /* Column Info Box */
    .column-info {
      position: absolute;
      top: 20px;
      right: 20px;
      background: var(--card-bg);
      border: 3px solid var(--text-gold);
      border-radius: 10px;
      padding: 15px 25px;
      min-width: 300px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.5);
      z-index: 100;
    }

    .column-info-label {
      font-size: 12px;
      color: #95a5a6;
      margin-bottom: 5px;
      letter-spacing: 1px;
    }

    .column-info-value {
      font-size: 20px;
      color: var(--text-gold);
      font-weight: bold;
      text-shadow: 0 0 10px rgba(241, 196, 15, 0.3);
    }

    /* Race Track */
    .race-track {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 10px;
      position: relative;
      padding: 20px 40px;
    }

    /* Lane */
    .lane {
      position: relative;
      height: 60px;
      background: repeating-linear-gradient(
        90deg,
        var(--track-bg) 0px,
        var(--track-bg) 20px,
        var(--lane-line) 20px,
        var(--lane-line) 22px
      );
      border: 2px solid var(--lane-line);
      border-radius: 8px;
      overflow: visible;
    }

    /* Finish Line */
    .finish-line {
      position: absolute;
      right: 0;
      top: 0;
      bottom: 0;
      width: 40px;
      background: repeating-linear-gradient(
        45deg,
        #000 0px,
        #000 10px,
        #fff 10px,
        #fff 20px
      );
      border-left: 3px solid var(--finish-line);
      z-index: 10;
    }

    /* Racer */
    .racer {
      position: absolute;
      left: 20px;
      top: 50%;
      transform: translateY(-50%);
      transition: left 0.3s ease-out;
      z-index: 20;
    }

    .racer-car {
      font-size: 32px;
      filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5));
      transform: scaleX(-1); /* Flip car to face right */
    }

    /* Different colors for each racer */
    .racer:nth-child(1) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(0deg); }
    .racer:nth-child(2) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(40deg); }
    .racer:nth-child(3) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(80deg); }
    .racer:nth-child(4) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(120deg); }
    .racer:nth-child(5) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(160deg); }
    .racer:nth-child(6) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(200deg); }
    .racer:nth-child(7) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(240deg); }
    .racer:nth-child(8) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(280deg); }
    .racer:nth-child(9) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(320deg); }
    .racer:nth-child(10) .racer-car { filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5)) hue-rotate(360deg); }

    .racer-name {
      position: absolute;
      top: -22px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.8);
      color: var(--text-gold);
      padding: 3px 10px;
      border-radius: 6px;
      font-size: 11px;
      font-weight: bold;
      white-space: nowrap;
      border: 2px solid var(--text-gold);
      box-shadow: 0 2px 8px rgba(0,0,0,0.5);
      display: none; /* Hide name tag on track */
    }

    /* Racer Gallery at Bottom */
    .racer-gallery {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgba(0, 0, 0, 0.95);
      border-top: 3px solid var(--finish-line);
      padding: 10px 20px;
      display: flex;
      gap: 15px;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      z-index: 500;
    }

    .racer-card {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 5px;
    }

    .racer-photo {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 3px solid var(--text-gold);
      object-fit: cover;
      background: var(--track-bg);
      box-shadow: 0 4px 8px rgba(0,0,0,0.5);
    }

    .racer-photo-placeholder {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 3px solid var(--text-gold);
      background: var(--track-bg);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.5);
    }

    .racer-card-name {
      font-size: 10px;
      color: var(--text-gold);
      font-weight: bold;
      max-width: 70px;
      text-align: center;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    /* Winner Screen */
    .winner-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.95);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      flex-direction: column;
    }

    .winner-screen.show {
      display: flex;
      animation: fadeIn 0.5s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .trophy {
      font-size: 120px;
      animation: trophy-bounce 1s ease-in-out infinite;
      margin-bottom: 30px;
      filter: drop-shadow(0 0 30px rgba(241, 196, 15, 0.6));
    }

    @keyframes trophy-bounce {
      0%, 100% { transform: translateY(0) scale(1); }
      50% { transform: translateY(-20px) scale(1.1); }
    }

    .winner-text {
      font-size: 48px;
      color: var(--text-gold);
      text-align: center;
      font-weight: bold;
      text-shadow: 0 0 30px rgba(241, 196, 15, 0.8);
      margin-bottom: 20px;
      animation: glow-pulse 2s ease-in-out infinite;
    }

    @keyframes glow-pulse {
      0%, 100% { text-shadow: 0 0 30px rgba(241, 196, 15, 0.8); }
      50% { text-shadow: 0 0 60px rgba(241, 196, 15, 1); }
    }

    .winner-name {
      font-size: 64px;
      color: #fff;
      font-weight: bold;
      margin-bottom: 30px;
      animation: winner-scale 1.5s ease-in-out infinite;
    }

    @keyframes winner-scale {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background: var(--text-gold);
      opacity: 0;
      animation: confetti-fall 3s linear infinite;
    }

    @keyframes confetti-fall {
      0% {
        opacity: 1;
        transform: translateY(-100vh) rotate(0deg);
      }
      100% {
        opacity: 0;
        transform: translateY(100vh) rotate(720deg);
      }
    }

    /* Loading Screen */
    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--track-bg);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      z-index: 2000;
    }

    .loading-text {
      font-size: 32px;
      color: var(--text-gold);
      margin-top: 20px;
      animation: pulse 1.5s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .loading-icon {
      font-size: 80px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div class="loading-screen" id="loadingScreen">
    <div class="loading-icon">üèéÔ∏è</div>
    <div class="loading-text">Loading Racers...</div>
  </div>

  <!-- Header -->
  <div class="header">
    <h1>üèÅ PAN ANALYTICS RACE TRACK üèÅ</h1>
    <div class="subtitle">ODD NUMBERS ADVANCE ‚Ä¢ EVEN NUMBERS STAY</div>
  </div>

  <!-- Column Info Box -->
  <div class="column-info">
    <div class="column-info-label">NOW CHECKING:</div>
    <div class="column-info-value" id="columnName">Preparing race...</div>
  </div>

  <!-- Race Container -->
  <div class="race-container">
    <div class="race-track" id="raceTrack">
      <!-- Lanes will be populated by JavaScript -->
    </div>
  </div>

  <!-- Racer Gallery -->
  <div class="racer-gallery" id="racerGallery">
    <!-- Racer photos will be populated by JavaScript -->
  </div>

  <!-- Winner Screen -->
  <div class="winner-screen" id="winnerScreen">
    <div class="trophy">üèÜ</div>
    <div class="winner-text">YOU ARE THE WINNER!</div>
    <div class="winner-name" id="winnerName"></div>
  </div>

  <script>
    // ============================================================================
    // CONFIGURATION
    // ============================================================================

    const RACE_CONFIG = {
      NUM_RACERS: 10,
      TOTAL_TIME_MS: 120000,      // 2 minutes total
      WINNER_TIME_MS: 20000,       // 20 seconds for winner
      RACE_TIME_MS: 100000,        // 100 seconds for race (faster!)
      TRACK_WIDTH_PERCENT: 90      // Track goes to 90% of screen
    };

    // Numerical columns from Pan_Master (EXACT COLUMN NAMES - skipping Screen Name, UID, TimestampMs, Birthday)
    // Column names MUST match Pan_Master sheet headers exactly
    const NUMERICAL_COLUMNS = [
      'Row',                              // Column 3
      'Zip',                              // Column 6
      'code_age_range',                   // Column 7
      'code_education',                   // Column 8
      'code_ethnicity',                   // Column 9
      'code_gender',                      // Column 10
      'code_orientation',                 // Column 11
      'code_industry',                    // Column 12
      'code_role',                        // Column 13
      'code_know_hosts',                  // Column 14
      'code_known_longest',               // Column 15
      'code_music_pref',                  // Column 16
      'code_recent_purchase',             // Column 17
      'code_at_worst',                    // Column 18
      'oh_interests_Cooking',             // Column 19
      'oh_interests_Music',               // Column 20
      'oh_interests_Fashion',             // Column 21
      'oh_interests_Travel',              // Column 22
      'oh_interests_Fitness',             // Column 23
      'oh_interests_Gaming',              // Column 24
      'oh_interests_Reading',             // Column 25
      'oh_interests_Art/Design',          // Column 26
      'oh_interests_Photography',         // Column 27
      'oh_interests_Hiking/Outdoors',     // Column 28
      'oh_interests_Sports (general)',    // Column 29
      'oh_interests_Volunteering',        // Column 30
      'oh_interests_Health Sciences',     // Column 31
      'oh_interests_TikTok (watching)',   // Column 32
      'oh_interests_Halloween orgy',      // Column 33
      'oh_interests_Frying oil',          // Column 34
      'code_know_score',                  // Column 35
      'code_social_stance',               // Column 36
      'has_fav_artist',                   // Column 37
      'has_song'                          // Column 38
    ];

    // ============================================================================
    // STATE
    // ============================================================================

    let racers = [];
    let currentColumn = 0;
    let raceInterval = null;
    let columnCheckDelay = 0;

    // ============================================================================
    // INITIALIZATION
    // ============================================================================

    function init() {
      loadRacers();
    }

    function loadRacers() {
      // Call Google Apps Script to get 5 random racers with Pan_Master data
      if (typeof google !== 'undefined' && google.script) {
        google.script.run
          .withSuccessHandler(onRacersLoaded)
          .withFailureHandler(onError)
          .getRaceData();
      } else {
        // Fallback for testing outside Google Apps Script
        console.log('Using sample data (not in Google Apps Script environment)');
        onRacersLoaded(generateSampleData());
      }
    }

    function generateSampleData() {
      // Generate sample racers for testing
      const sampleNames = ['Racer Alpha', 'Racer Beta', 'Racer Gamma', 'Racer Delta', 'Racer Epsilon',
                           'Racer Zeta', 'Racer Eta', 'Racer Theta', 'Racer Iota', 'Racer Kappa'];
      const racers = sampleNames.map((name, idx) => {
        // Generate random Pan_Master data
        const panData = {};
        NUMERICAL_COLUMNS.forEach(col => {
          // Random number 0-9 for each column
          panData[col] = Math.floor(Math.random() * 10);
        });

        return {
          screenName: name,
          uid: 'TEST_' + idx,
          photoUrl: '',
          panData: panData
        };
      });

      return {
        success: true,
        racers: racers
      };
    }

    function onRacersLoaded(data) {
      if (!data || !data.success || !data.racers || data.racers.length === 0) {
        onError(data?.error || 'No racers found');
        return;
      }

      racers = data.racers;
      setupRaceTrack();

      // Hide loading screen
      document.getElementById('loadingScreen').style.display = 'none';

      // Start race after 2 second delay
      setTimeout(startRace, 2000);
    }

    function onError(error) {
      console.error('Error:', error);
      document.getElementById('loadingScreen').innerHTML = `
        <div class="loading-icon">‚ö†Ô∏è</div>
        <div class="loading-text">Error loading race data</div>
        <div style="color: #e74c3c; margin-top: 10px; font-size: 14px;">${error}</div>
      `;
    }

    // ============================================================================
    // RACE TRACK SETUP
    // ============================================================================

    function setupRaceTrack() {
      const track = document.getElementById('raceTrack');
      track.innerHTML = '';

      racers.forEach((racer, index) => {
        racer.position = 0; // Start at 0%
        racer.index = index;

        const lane = document.createElement('div');
        lane.className = 'lane';
        lane.id = `lane-${index}`;

        // Add finish line
        const finishLine = document.createElement('div');
        finishLine.className = 'finish-line';
        lane.appendChild(finishLine);

        // Add racer
        const racerEl = document.createElement('div');
        racerEl.className = 'racer';
        racerEl.id = `racer-${index}`;
        racerEl.innerHTML = `
          <div class="racer-name">${escapeHtml(racer.screenName)}</div>
          <div class="racer-car">üèéÔ∏è</div>
        `;
        lane.appendChild(racerEl);

        track.appendChild(lane);
      });

      // Setup racer gallery at bottom
      setupRacerGallery();
    }

    function setupRacerGallery() {
      const gallery = document.getElementById('racerGallery');
      gallery.innerHTML = '';

      racers.forEach((racer, index) => {
        const card = document.createElement('div');
        card.className = 'racer-card';
        card.id = `racer-card-${index}`;

        if (racer.photoUrl) {
          card.innerHTML = `
            <img src="${escapeHtml(racer.photoUrl)}" class="racer-photo" alt="${escapeHtml(racer.screenName)}">
            <div class="racer-card-name">${escapeHtml(racer.screenName)}</div>
          `;
        } else {
          card.innerHTML = `
            <div class="racer-photo-placeholder">üë§</div>
            <div class="racer-card-name">${escapeHtml(racer.screenName)}</div>
          `;
        }

        gallery.appendChild(card);
      });
    }

    // ============================================================================
    // RACE LOGIC
    // ============================================================================

    function startRace() {
      currentColumn = 0;

      // Calculate delay between column checks
      columnCheckDelay = RACE_CONFIG.RACE_TIME_MS / NUMERICAL_COLUMNS.length;

      document.getElementById('columnName').textContent = 'Race starting...';

      setTimeout(() => {
        processNextColumn();
      }, 1000);
    }

    function processNextColumn() {
      if (currentColumn >= NUMERICAL_COLUMNS.length) {
        // Race complete - check for winner
        checkWinner();
        return;
      }

      const columnName = NUMERICAL_COLUMNS[currentColumn];
      document.getElementById('columnName').textContent = columnName;

      // Process each racer for this column
      racers.forEach(racer => {
        const value = racer.panData[columnName];

        // Blank/null/undefined treated as even (stay still)
        if (value === null || value === undefined || value === '') {
          // Stay still
        } else {
          const numValue = Number(value);
          if (!isNaN(numValue)) {
            // Check if odd or even
            if (numValue % 2 === 1) {
              // ODD - move forward
              racer.position++;
              updateRacerPosition(racer);
            }
            // EVEN - stay still (do nothing)
          }
        }
      });

      // Check if anyone crossed finish line
      const winner = racers.find(r => r.position >= NUMERICAL_COLUMNS.length);
      if (winner) {
        showWinner(winner);
        return;
      }

      currentColumn++;
      setTimeout(processNextColumn, columnCheckDelay);
    }

    function updateRacerPosition(racer) {
      const racerEl = document.getElementById(`racer-${racer.index}`);
      const maxPosition = NUMERICAL_COLUMNS.length;
      const percentPosition = (racer.position / maxPosition) * RACE_CONFIG.TRACK_WIDTH_PERCENT;

      racerEl.style.left = percentPosition + '%';
    }

    function checkWinner() {
      // Find racer with highest position
      const winner = racers.reduce((max, racer) =>
        racer.position > max.position ? racer : max
      );

      showWinner(winner);
    }

    function showWinner(winner) {
      document.getElementById('columnName').textContent = 'RACE COMPLETE!';

      setTimeout(() => {
        document.getElementById('winnerName').textContent = winner.screenName;
        document.getElementById('winnerScreen').classList.add('show');

        // Add confetti
        createConfetti();

        // AUTO-RESTART: After 20 seconds, start new race with new racers
        setTimeout(() => {
          restartRace();
        }, RACE_CONFIG.WINNER_TIME_MS);
      }, 1000);
    }

    function restartRace() {
      // Hide winner screen
      document.getElementById('winnerScreen').classList.remove('show');

      // Show loading screen
      const loadingScreen = document.getElementById('loadingScreen');
      loadingScreen.style.display = 'flex';
      loadingScreen.innerHTML = `
        <div class="loading-icon">üèéÔ∏è</div>
        <div class="loading-text">Loading Next Race...</div>
      `;

      // Reset state
      racers = [];
      currentColumn = 0;

      // Load new racers
      setTimeout(() => {
        loadRacers();
      }, 2000);
    }

    function createConfetti() {
      const winnerScreen = document.getElementById('winnerScreen');
      const colors = ['#f1c40f', '#e74c3c', '#3498db', '#2ecc71', '#9b59b6'];

      for (let i = 0; i < 50; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.className = 'confetti';
          confetti.style.left = Math.random() * 100 + '%';
          confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.animationDelay = Math.random() * 3 + 's';
          winnerScreen.appendChild(confetti);

          setTimeout(() => confetti.remove(), 3000);
        }, i * 50);
      }
    }

    // ============================================================================
    // HELPERS
    // ============================================================================

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // ============================================================================
    // START
    // ============================================================================

    window.onload = init;
  </script>
</body>
</html>
