/**
 * ============================================================================
 * PANOPTICON FOUNDATION SCRIPT
 * ============================================================================
 * Main application code for guest check-in and data management system
 *
 * Version: 2.1.0
 * Last Updated: 2025-10-24
 *
 * WHAT'S NEW IN v2.1.0:
 * - Added aggressive cache-busting headers to all pages
 * - Implemented servePageNoCaching() helper function
 * - Added version identifiers to MapDisplay and Display pages
 * - Fixed deployment caching issues (pages now always serve fresh content)
 *
 * SYSTEM OVERVIEW:
 * - Guest check-in system with photo upload
 * - Map visualization of zip code distribution
 * - Data analytics and display dashboard
 * - Real-time guest tracking and management
 *
 * KEY FILES:
 * - Code (this file): Main application logic and routing
 * - MapCode: Zip code data extraction and geocoding
 * - CheckInInterface: Guest check-in HTML page
 * - MapDisplay: Zip code map visualization
 * - SheetLocations: Data dictionary and sheet structure reference
 *
 * DEFAULT PAGE: Display dashboard (page=display or no parameter)
 *
 * ============================================================================
 * DEPLOYMENT INSTRUCTIONS (CRITICAL - READ BEFORE DEPLOYING)
 * ============================================================================
 *
 * Google Apps Script aggressively caches web app deployments. To ensure
 * your latest changes are served, you MUST create a NEW deployment:
 *
 * METHOD 1: Create New Deployment (RECOMMENDED)
 * ----------------------------------------------
 * 1. In Google Apps Script Editor, click "Deploy" > "New deployment"
 * 2. Select type: "Web app"
 * 3. Description: "v2.1.0 - Cache-busting fix [DATE]"
 * 4. Execute as: Your account
 * 5. Who has access: Choose based on your needs
 * 6. Click "Deploy"
 * 7. Copy the NEW deployment URL
 * 8. Update Display carousel settings with the new URL
 * 9. Test by checking browser console for version: 2.1.0-20251024
 *
 * METHOD 2: Manage Deployments (Alternative)
 * -------------------------------------------
 * 1. Click "Deploy" > "Manage deployments"
 * 2. Click the pencil icon next to your active deployment
 * 3. Under "Version", click "New version"
 * 4. Add description: "v2.1.0 - Cache-busting fix"
 * 5. Click "Deploy"
 * 6. The URL stays the same, but serves new content
 *
 * VERIFICATION:
 * -------------
 * After deploying, verify the new version is live:
 * 1. Open the deployment URL + ?page=md
 * 2. Open browser console (F12)
 * 3. Look for log: "Version: 2.1.0-20251024"
 * 4. If you see old version or no version, clear cache and try again
 *
 * BROWSER CACHE CLEARING:
 * -----------------------
 * If old version still appears:
 * - Chrome/Edge: Ctrl+Shift+R (Windows) or Cmd+Shift+R (Mac)
 * - Firefox: Ctrl+F5 (Windows) or Cmd+Shift+R (Mac)
 * - Safari: Cmd+Option+R
 *
 * Or manually clear cache:
 * 1. Open DevTools (F12)
 * 2. Right-click the refresh button
 * 3. Select "Empty Cache and Hard Reload"
 *
 * ============================================================================
 */

// ============================================================================
// CONFIGURATION - SINGLE SOURCE OF TRUTH
// ============================================================================

/**
 * Central configuration object for the entire application
 *
 * IMPORTANT: This CONFIG is used throughout the application.
 * Column indices are 0-based for array access.
 * To get the actual column letter, add 1 (e.g., ZIP: 5 = Column F)
 *
 * REFERENCE: See SheetLocations file for complete column mapping
 */
const CONFIG = {
  // Sheet Names
  SHEETS: {
    FRC: 'FRC',  // Form Responses (Clean) - main guest data
    MASTER_DESC: 'Master_Desc',
    PAN_LOG: 'Pan_Log',
    PAN_MASTER: 'Pan_Master',  // Pan Analytics Master data
    TOOL_REGISTRY: 'Tool_Registry',
    DATA_DICT: 'Data_Dictionary'
  },

  // FV System Sheets (used by FVcode)
  SOURCE_SHEET: 'FRC',         // Source data for villagers
  OUTPUT_SHEET: 'Village Bios', // Bio sheet generated by FMCode

  // FRC Column Indices (0-based for arrays, add 1 for actual column number)
  // Example: ZIP: 5 means Column F (6th column)
  COL: {
    TIMESTAMP: 0,        // Column A - Timestamp
    BIRTHDAY: 1,         // Column B - Birthday (MM/DD)
    ZODIAC: 2,           // Column C - Zodiac Sign
    AGE: 3,              // Column D - Age Range
    EDU: 4,              // Column E - Education Level
    ZIP: 5,              // Column F - Current 5 Digit Zip Code *** USED BY MAP ***
    ETHNICITY: 6,        // Column G - Self Identified Ethnicity
    GENDER: 7,           // Column H - Self-Identified Gender
    ORIENTATION: 8,      // Column I - Self-Identified Sexual Orientation
    INDUSTRY: 9,         // Column J - Employment Information (Industry)
    ROLE: 10,            // Column K - Employment Information (Role)
    KNOW_HOSTS: 11,      // Column L - Do you know the Host(s)?
    KNOWN_LONGEST: 12,   // Column M - Which host have you known the longest?
    KNOW_SCORE: 13,      // Column N - If yes, how well do you know them?
    INTERESTS_RAW: 14,   // Column O - Your General Interests (Choose 3)
    INTEREST_1: 15,      // Column P - Interest_1
    INTEREST_2: 16,      // Column Q - Interest_2
    INTEREST_3: 17,      // Column R - Interest_3
    MUSIC: 18,           // Column S - Music Preference
    ARTIST: 19,          // Column T - Current Favorite Artist
    SONG: 20,            // Column U - Name one song you want to hear at the party
    RECENT_PURCHASE: 21, // Column V - Recent purchase you're most happy about
    AT_WORST: 22,        // Column W - At your worst you are...
    SOCIAL_STANCE: 23,   // Column X - Which best describes your general social stance?
    SCREEN_NAME: 24,     // Column Y - Screen Name
    UID: 25,             // Column Z - UID
    DDD_SCORE: 26,       // Column AA - DDD_Score
    CHECKED_IN: 27,      // Column AB - Checked-In
    CHECKIN_TIME: 28,    // Column AC - Check-in Time
    PHOTO_URL: 29        // Column AD - PHOTO_URL_COL
  },

  // Drive Folder ID for guest photos
  PHOTO_FOLDER_ID: '1ZcP5jpYsYy0xuGqlFYNrDgG4K40eEKJB'
};

// ============================================================================
// MATCHMAKING CONFIGURATION
// ============================================================================

/**
 * Matchmaking configuration with smart weights based on Gen_Analytics
 *
 * WEIGHT PHILOSOPHY:
 * - Rare interests = High weight (strong signal)
 * - Common interests = Low weight (weak signal)
 * - Feature correlations from Cramér's V matrix inform tier weights
 *
 * Based on analysis of 92 guests from Response_Pan_Dictionary
 * Run listAllInterests() to see full breakdown
 */
const MATCH_CONFIG = {
  // Feature-level weights (from Cramér's V analysis)
  FEATURE_WEIGHTS: {
    // TIER 1: Super Strong Correlation (V > 0.5) - 3x weight
    AGE: 3,
    INTEREST_1: 3,
    INTEREST_2: 3,
    INTEREST_3: 3,

    // TIER 2: Moderate Correlation (V 0.4-0.5) - 2x weight
    INDUSTRY: 2,
    ROLE: 2,
    MUSIC: 2,
    SOCIAL_STANCE: 2,
    ZODIAC: 2,

    // TIER 3: Weak Correlation (V < 0.3) - 1x weight
    EDUCATION: 1,
    RECENT_PURCHASE: 1,
    AT_WORST: 1,
    KNOW_HOSTS: 1
  },

  // Interest-specific weights (based on rarity/distinctiveness)
  // Higher weight = rarer interest = stronger match signal
  INTEREST_WEIGHTS: {
    // Ultra-Rare (1 guest) - 10x weight
    'Cars': 10,
    'Dancing': 10,
    'Film / movies': 10,
    'Food (eating, not cooking)': 10,  // Fixed: was split into two entries
    'Frying oil': 10,
    'Halloween orgy': 10,
    'Health Sciences': 10,
    'politics': 10,
    'Pop Culture': 10,
    'Self realization & Occult; Fast cars and knives; Rock and Roll baby!': 10,
    'TikTok (watching)': 10,

    // High Distinctiveness (2-19 guests) - 3-5x weight
    'Photography': 5,
    'Volunteering': 5,
    'Sports (general)': 3,
    'Reading': 3,
    'Gaming': 3,
    'Fitness': 3,
    'Fashion': 3,

    // Moderate (20-39 guests) - 1.5-2x weight
    'Hiking/Outdoors': 2,
    'Cooking': 2,
    'Travel': 1.5,
    'Fashion': 1.5,
    'Fitness': 1.5,
    'Gaming': 1.5,

    // Common (40+ guests) - 0.5-1x weight
    'Art/Design': 1,
    'Music': 0.5  // Too common (73% of guests), low signal
  },

  // Matching thresholds
  THRESHOLDS: {
    EXCELLENT_MATCH: 0.7,   // 70%+ compatibility
    GOOD_MATCH: 0.5,        // 50-69% compatibility
    OKAY_MATCH: 0.3,        // 30-49% compatibility
    MIN_MATCH: 0.2          // Below 20% = poor match
  },

  // Pyramid Match display settings
  PYRAMID: {
    TOP_MATCHES: 5,         // Show top 5 matches in pyramid
    MIN_DISPLAY_SCORE: 0.3  // Only show matches above 30%
  }
};

// ============================================================================
// MENU SYSTEM
// ============================================================================

/**
 * Creates custom menu when spreadsheet opens
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('🎭 Panopticon')
    .addItem('📊 View Display Dashboard', 'openDisplay')
    .addSeparator()
    .addItem('✅ Open Check-In Interface', 'openCheckIn')
    .addItem('🧪 Test Check-In System', 'testCheckInSystem')
    .addSeparator()
    .addItem('🌾 View FV (Farm & Villagers)', 'openFV')
    .addItem('🏘️ View Village Bios', 'openVillageBios')
    .addItem('💕 View Match Maker', 'openMatchMaker')
    .addItem('💃 View Dance Teams', 'openDanceTeams')
    .addSeparator()
    .addItem('📈 Generate Master Description', 'generateMasterDesc')
    .addItem('🔍 View Tool Registry', 'viewToolRegistry')
    .addSeparator()
    .addItem('🚀 Deploy Web App', 'showDeployInstructions')
    .addToUi();
  
  Logger.log('✅ Panopticon menu created');
}

// ============================================================================
// WEB APP ROUTER
// ============================================================================

/**
 * Main routing function for web app - handles all page requests
 *
 * ROUTING LOGIC:
 * This function determines which page to display based on the URL parameter.
 *
 * URL STRUCTURE:
 * https://script.google.com/.../exec?page=PAGENAME
 *
 * AVAILABLE PAGES:
 * - display (DEFAULT): Simple status dashboard
 * - checkin: Guest check-in interface (?page=checkin)
 * - md: Map Display with zip code visualization (?page=md)
 * - intro: Introduction page (?page=intro)
 * - wall: The Wall visualization (?page=wall)
 * - map: Map interface (?page=map)
 * - mm: MM interface (?page=mm)
 * - alm: Dance Team Generator (?page=alm)
 * - village: Village Bios (?page=village)
 *
 * DEFAULT BEHAVIOR:
 * When no page parameter is provided OR page=display is specified,
 * the simple display dashboard is shown.
 *
 * AUTOMATIC ROUTING:
 * Map Display (md) automatically loads zip data from FRC Column F
 * and initiates route network visualization.
 *
 * @param {Object} e - Event object with parameters from URL
 * @returns {HtmlOutput} The requested page or error page
 */

/**
 * Helper function to serve HTML files
 *
 * Cache-busting is handled via meta tags in the HTML files themselves,
 * as Google Apps Script's addMetaTag() doesn't support cache-control tags.
 *
 * @param {string} fileName - Name of the HTML file to serve
 * @param {string} title - Page title
 * @returns {HtmlOutput} HTML output ready to serve
 */
function servePageNoCaching(fileName, title) {
  return HtmlService.createTemplateFromFile(fileName)
    .evaluate()
    .setTitle(title)
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function doGet(e) {
  // Handle missing event object
  if (!e || !e.parameter) {
    e = { parameter: {} };
  }

  // Get page parameter (default to 'intro')
  const page = (e.parameter.page || 'intro').toLowerCase();

  try {
    switch(page) {
      case 'intro':
        return servePageNoCaching('Intro', 'Introduction');

      case 'wall':
        return servePageNoCaching('Wall', 'The Wall - Panopticon');

      case 'map':
        return servePageNoCaching('Map', 'Map');

      case 'mm':
        return servePageNoCaching('mm', 'Match Maker - Live Compatibility');

      case 'alm':
      case 'abl':
        return servePageNoCaching('ALMhtml', 'Dance Team Generator - Pyramid Matchmaking');

      case 'race':
      case 'panrace':
        return servePageNoCaching('PanRace', 'Pan Analytics Race Track');

      case 'village':
        return servePageNoCaching('VillageBios', 'Village Bios - Guest Profiles');

      case 'fv':
      case 'farm':
      case 'chronicle':
        return servePageNoCaching('FV', 'FV - Farm & Villagers');

      case 'checkin':
        return servePageNoCaching('CheckInInterface', 'Guest Check-In');

      case 'md':
        // Map Display - automatically loads and visualizes zip data from FRC Column F
        // Uses servePageNoCaching to prevent serving stale versions
        return servePageNoCaching('MapDisplay', 'Zip Map Display');

      case 'display':
      default:
        // DEFAULT PAGE: Display Carousel
        return servePageNoCaching('Display', 'Panopticon Display');
    }
  } catch (error) {
    return createErrorPage(error);
  }
}

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Gets the FRC sheet
 */
function getFRCSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(CONFIG.SHEETS.FRC);
  
  if (!sheet) {
    // Try alternative names
    const altSheet = ss.getSheetByName('Form Responses (Clean)');
    if (altSheet) {
      Logger.log('⚠️ Found "Form Responses (Clean)" - please rename to "FRC"');
      return altSheet;
    }
    
    const availableSheets = ss.getSheets().map(s => s.getName()).join(', ');
    throw new Error('FRC sheet not found. Available sheets: ' + availableSheets + '. Please rename your sheet to "FRC"');
  }
  
  return sheet;
}

/**
 * Debug function - lists all sheets in the spreadsheet
 */
function listAllSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();
  
  Logger.log('=== ALL SHEETS IN SPREADSHEET ===');
  sheets.forEach((sheet, index) => {
    Logger.log(`${index + 1}. "${sheet.getName()}" (${sheet.getLastRow()} rows)`);
  });
  
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Sheet List',
    'Found ' + sheets.length + ' sheets:\n\n' + 
    sheets.map((s, i) => `${i+1}. ${s.getName()}`).join('\n'),
    ui.ButtonSet.OK
  );
}

/**
 * Gets all guests from FRC (analytics run on all 92 guests)
 */
function getCheckedInGuests() {
  const sheet = getFRCSheet();
  const data = sheet.getDataRange().getValues();
  
  const guests = [];
  
  // Skip header row (index 0)
  for (let i = 1; i < data.length; i++) {
    const row = data[i];

    // Include all guests (removed check-in filter to run analytics on all 92 guests)
    guests.push({
      rowIndex: i,
      timestamp: row[CONFIG.COL.TIMESTAMP],
      birthday: row[CONFIG.COL.BIRTHDAY],
      zodiac: row[CONFIG.COL.ZODIAC],
      age: row[CONFIG.COL.AGE],
      education: row[CONFIG.COL.EDU],
      zip: row[CONFIG.COL.ZIP],
      ethnicity: row[CONFIG.COL.ETHNICITY],
      gender: row[CONFIG.COL.GENDER],
      orientation: row[CONFIG.COL.ORIENTATION],
      industry: row[CONFIG.COL.INDUSTRY],
      role: row[CONFIG.COL.ROLE],
      knowHosts: row[CONFIG.COL.KNOW_HOSTS],
      knownLongest: row[CONFIG.COL.KNOWN_LONGEST],
      knowScore: row[CONFIG.COL.KNOW_SCORE],
      interestsRaw: row[CONFIG.COL.INTERESTS_RAW],
      interest1: row[CONFIG.COL.INTEREST_1],
      interest2: row[CONFIG.COL.INTEREST_2],
      interest3: row[CONFIG.COL.INTEREST_3],
      music: row[CONFIG.COL.MUSIC],
      artist: row[CONFIG.COL.ARTIST],
      song: row[CONFIG.COL.SONG],
      recentPurchase: row[CONFIG.COL.RECENT_PURCHASE],
      atWorst: row[CONFIG.COL.AT_WORST],
      socialStance: row[CONFIG.COL.SOCIAL_STANCE],
      screenName: row[CONFIG.COL.SCREEN_NAME],
      uid: row[CONFIG.COL.UID],
      dddScore: row[CONFIG.COL.DDD_SCORE],
      checkedIn: row[CONFIG.COL.CHECKED_IN],
      checkInTime: row[CONFIG.COL.CHECKIN_TIME],
      photoUrl: row[CONFIG.COL.PHOTO_URL]
    });
  }

  Logger.log(`✅ Found ${guests.length} total guests`);
  return guests;
}

/**
 * Get race data for Pan Analytics Race
 * Returns 5 random racers with their Pan_Master data
 *
 * IMPORTANT: Screen Name is ALWAYS pulled from FRC (fresh/editable)
 * Pan_Master data is matched via UID for analytics
 */
function getRaceData() {
  try {
    Logger.log('🏁 Starting getRaceData...');

    // Get all checked-in guests from FRC
    const guests = getCheckedInGuests();
    Logger.log(`Found ${guests.length} total guests in FRC`);

    if (guests.length < 10) {
      throw new Error(`Not enough guests. Found ${guests.length}, need at least 10.`);
    }

    // Randomly select 10 guests
    const shuffled = guests.sort(() => Math.random() - 0.5);
    const selectedGuests = shuffled.slice(0, 10);
    Logger.log(`Selected 10 random guests: ${selectedGuests.map(g => g.screenName).join(', ')}`);

    // Get Pan_Master sheet
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const panSheet = ss.getSheetByName(CONFIG.SHEETS.PAN_MASTER);

    if (!panSheet) {
      throw new Error('Pan_Master sheet not found');
    }

    // Get Pan_Master data (ALL rows)
    const panData = panSheet.getDataRange().getValues();
    const panHeaders = panData[0]; // First row is headers
    Logger.log(`Pan_Master has ${panData.length - 1} rows and ${panHeaders.length} columns`);
    Logger.log(`Pan_Master headers: ${panHeaders.slice(0, 10).join(', ')}...`);

    // Build racers array with Pan_Master data
    const racers = [];

    for (const guest of selectedGuests) {
      // Find this guest's row in Pan_Master by matching UID (Column 2, index 1)
      let panRow = null;
      for (let i = 1; i < panData.length; i++) { // Skip header row
        if (panData[i][1] === guest.uid) { // UID is column 2 (index 1)
          panRow = panData[i];
          break;
        }
      }

      if (!panRow) {
        Logger.log(`⚠️ Warning: No Pan_Master data found for ${guest.screenName} (${guest.uid})`);
        continue; // Skip this racer
      }

      // Only include NUMERICAL columns that will be used in the race
      // Skip: Screen Name, UID, TimestampMs, Birthday_MM/DD (Date objects cause serialization issues)
      const numericalColumns = [
        'Row', 'Zip',
        'code_age_range', 'code_education', 'code_ethnicity', 'code_gender',
        'code_orientation', 'code_industry', 'code_role', 'code_know_hosts',
        'code_known_longest', 'code_music_pref', 'code_recent_purchase', 'code_at_worst',
        'oh_interests_Cooking', 'oh_interests_Music', 'oh_interests_Fashion',
        'oh_interests_Travel', 'oh_interests_Fitness', 'oh_interests_Gaming',
        'oh_interests_Reading', 'oh_interests_Art/Design', 'oh_interests_Photography',
        'oh_interests_Hiking/Outdoors', 'oh_interests_Sports (general)',
        'oh_interests_Volunteering', 'oh_interests_Health Sciences',
        'oh_interests_TikTok (watching)', 'oh_interests_Halloween orgy',
        'oh_interests_Frying oil', 'code_know_score', 'code_social_stance',
        'has_fav_artist', 'has_song'
      ];

      // Build panData object with ONLY numerical columns
      const panDataObj = {};
      for (const colName of numericalColumns) {
        const colIndex = panHeaders.indexOf(colName);
        if (colIndex !== -1) {
          const value = panRow[colIndex];
          // Convert to number or keep as empty string (safer for serialization)
          panDataObj[colName] = (value === null || value === undefined || value === '') ? '' : Number(value) || value;
        } else {
          panDataObj[colName] = ''; // Column not found, treat as blank
        }
      }

      // IMPORTANT: Use Screen Name from FRC, not Pan_Master
      racers.push({
        screenName: guest.screenName,  // From FRC (fresh, editable)
        uid: guest.uid,                 // From FRC
        photoUrl: guest.photoUrl || '', // From FRC (ensure string)
        panData: panDataObj             // Only numerical columns from Pan_Master
      });

      Logger.log(`✓ Matched ${guest.screenName} to Pan_Master row`);
    }

    if (racers.length < 10) {
      Logger.log(`⚠️ Only found ${racers.length} racers with Pan_Master data`);
      // Continue anyway if we have at least 5
      if (racers.length < 5) {
        throw new Error(`Not enough racers with Pan_Master data. Found ${racers.length}, need at least 5.`);
      }
    }

    Logger.log(`✅ Race data prepared for ${racers.length} racers`);

    return {
      success: true,
      racers: racers
    };

  } catch (error) {
    Logger.log(`❌ Error in getRaceData: ${error.message}`);
    Logger.log(error.stack);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Build Dance Teams for ALM (Abbie Lee Miller) Pyramid
 * Returns teams of 6 dancers with pyramid structure (1 focal + 2 + 3)
 *
 * IMPORTANT: Screen Names are ALWAYS pulled from FRC (fresh/editable)
 *
 * @param {number} numTeams - Number of teams to generate (default: 15)
 * @returns {object} {success: true, teams: [...], totalGuests: number}
 */
function buildDanceTeams(numTeams) {
  try {
    numTeams = numTeams || 15;
    Logger.log(`🎭 Building ${numTeams} dance teams...`);

    // Get all checked-in guests from FRC (ensures fresh screen names)
    const guests = getCheckedInGuests();
    Logger.log(`Found ${guests.length} total guests`);

    // Check minimum requirement
    if (guests.length < 6) {
      return {
        minimumNotMet: true,
        totalGuests: guests.length,
        message: `Need at least 6 checked-in guests. Currently have ${guests.length}.`
      };
    }

    // Build teams
    const teams = [];
    const TEAM_SIZE = 6;

    for (let i = 0; i < numTeams; i++) {
      // Shuffle guests for random selection
      const shuffled = guests.sort(() => Math.random() - 0.5);
      const teamMembers = shuffled.slice(0, TEAM_SIZE);

      if (teamMembers.length < TEAM_SIZE) {
        Logger.log(`⚠️ Not enough guests for team ${i + 1}`);
        break; // Stop if we can't form a full team
      }

      // Structure: 1 focal, 2 in row2, 3 in row3
      const focal = teamMembers[0];
      const row2 = teamMembers.slice(1, 3);
      const row3 = teamMembers.slice(3, 6);

      // Calculate team stats (simplified - can be enhanced with similarity matrix)
      const avgSimilarity = 0.6 + Math.random() * 0.3; // Random 60-90%
      const topMatch = 0.7 + Math.random() * 0.25; // Random 70-95%

      // Generate team name based on focal dancer's music preference
      const musicGenre = focal.music || 'Contemporary';
      const teamNames = [
        `${musicGenre} Elite`,
        `The ${musicGenre} Squad`,
        `${focal.screenName}'s ${musicGenre} Crew`,
        `Team ${musicGenre}`,
        `${musicGenre} Stars`
      ];
      const teamName = teamNames[Math.floor(Math.random() * teamNames.length)];

      // Generate Abby's quote
      const abbyQuotes = [
        "Everyone's replaceable!",
        "Save your tears for your pillow!",
        "I'm not impressed.",
        "You're better than that!",
        "This is a disaster!",
        "Maddie wouldn't do it that way.",
        "I need to see more energy!",
        "That was incredible!",
        "You need to work harder!",
        "This team has potential!"
      ];

      teams.push({
        teamName: teamName,
        focal: {
          screenName: focal.screenName,  // From FRC (fresh)
          photoUrl: focal.photoUrl || '',
          music: focal.music || 'Various',
          similarity: 1.0 // Focal is always 100% compatible with themselves
        },
        row2: row2.map(dancer => ({
          screenName: dancer.screenName,  // From FRC (fresh)
          photoUrl: dancer.photoUrl || '',
          music: dancer.music || 'Various',
          similarity: 0.7 + Math.random() * 0.25 // 70-95%
        })),
        row3: row3.map(dancer => ({
          screenName: dancer.screenName,  // From FRC (fresh)
          photoUrl: dancer.photoUrl || '',
          music: dancer.music || 'Various',
          similarity: 0.5 + Math.random() * 0.3 // 50-80%
        })),
        stats: {
          avgSimilarity: avgSimilarity,
          topMatch: topMatch,
          genreMix: musicGenre
        },
        teamBio: `This ${musicGenre} team brings together diverse talents with ${Math.round(avgSimilarity * 100)}% compatibility.`,
        abbyQuote: abbyQuotes[Math.floor(Math.random() * abbyQuotes.length)]
      });

      Logger.log(`✓ Built team ${i + 1}: ${teamName}`);
    }

    Logger.log(`✅ Successfully built ${teams.length} teams`);

    return {
      success: true,
      teams: teams,
      totalGuests: guests.length
    };

  } catch (error) {
    Logger.log(`❌ Error in buildDanceTeams: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Creates error page
 */
function createErrorPage(error) {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body {
          font-family: monospace;
          background: #1a1a1a;
          color: #ff6b6b;
          padding: 40px;
        }
        .error {
          background: #2d2d2d;
          border: 2px solid #ff6b6b;
          border-radius: 10px;
          padding: 20px;
          max-width: 800px;
          margin: 0 auto;
        }
        h1 { color: #ff6b6b; }
        pre { 
          background: #1a1a1a; 
          padding: 15px; 
          border-radius: 5px;
          overflow-x: auto;
        }
      </style>
    </head>
    <body>
      <div class="error">
        <h1>❌ System Error</h1>
        <p><strong>Message:</strong> ${error.message}</p>
        <pre>${error.stack || 'No stack trace available'}</pre>
      </div>
    </body>
    </html>
  `;
  
  return HtmlService.createHtmlOutput(html)
    .setTitle('Error')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// ============================================================================
// MENU HANDLERS
// ============================================================================

function openDisplay() {
  const url = ScriptApp.getService().getUrl();
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'Display Dashboard'
  );
}

function openCheckIn() {
  const url = ScriptApp.getService().getUrl() + '?page=checkin';
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'Check-In Interface'
  );
}

function openVillageBios() {
  const url = ScriptApp.getService().getUrl() + '?page=village';
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'Village Bios'
  );
}

function openMatchMaker() {
  const url = ScriptApp.getService().getUrl() + '?page=mm';
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'Match Maker'
  );
}

function openDanceTeams() {
  const url = ScriptApp.getService().getUrl() + '?page=alm';
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'Dance Teams'
  );
}

function openFV() {
  const url = ScriptApp.getService().getUrl() + '?page=fv';
  const html = `
    <html>
      <body>
        <p>Open this URL in a new tab:</p>
        <p><a href="${url}" target="_blank">${url}</a></p>
        <script>
          window.open('${url}', '_blank');
          google.script.host.close();
        </script>
      </body>
    </html>
  `;
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(html).setWidth(400).setHeight(150),
    'FV - Farm & Villagers'
  );
}

function showDeployInstructions() {
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Deploy as Web App',
    'To deploy:\n\n' +
    '1. Click "Deploy" → "New deployment"\n' +
    '2. Type: Web app\n' +
    '3. Execute as: Me\n' +
    '4. Who has access: Anyone (or your preference)\n' +
    '5. Click "Deploy"\n' +
    '6. Copy the web app URL\n\n' +
    'The URL will work for both display and check-in pages.',
    ui.ButtonSet.OK
  );
}

function testCheckInSystem() {
  try {
    const guests = getCheckedInGuests();
    
    // Check if we're in UI context or web app context
    try {
      const ui = SpreadsheetApp.getUi();
      // We're in UI context - show alert
      ui.alert(
        '✅ Check-In System Test',
        `Found ${guests.length} total guests.\n\n` +
        (guests.length > 0 ?
          `Sample guest:\n` +
          `- Screen Name: ${guests[0].screenName}\n` +
          `- UID: ${guests[0].uid}\n` +
          `- Check-in Time: ${guests[0].checkInTime}\n` +
          `- Photo: ${guests[0].photoUrl ? 'Yes' : 'No'}`
          : 'No guests found.'),
        ui.ButtonSet.OK
      );
    } catch (uiError) {
      // We're in web app context - just log and return result
      Logger.log('✅ Check-In System Test');
      Logger.log(`Found ${guests.length} total guests`);
      if (guests.length > 0) {
        Logger.log('Sample guest: ' + JSON.stringify(guests[0], null, 2));
      }
      
      return {
        ok: true,
        guestCount: guests.length,
        sampleGuest: guests.length > 0 ? guests[0] : null
      };
    }
  } catch (error) {
    Logger.log('❌ Error: ' + error.message);
    
    try {
      SpreadsheetApp.getUi().alert('Error: ' + error.message);
    } catch (e) {
      return {ok: false, error: error.message};
    }
  }
}

/**
 * Test function to verify backend connectivity
 * Returns a simple object to confirm functions are accessible
 */
function testConnection() {
  return {
    status: 'ok',
    message: 'Backend is connected!',
    timestamp: new Date().toISOString()
  };
}

/**
 * Simplest possible test - returns a string
 */
function ping() {
  return "pong";
}

/**
 * Test with spreadsheet access
 */
function testSpreadsheetAccess() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    return {
      ok: true,
      spreadsheetName: ss.getName(),
      sheetCount: ss.getSheets().length
    };
  } catch (error) {
    return {
      ok: false,
      error: error.toString()
    };
  }
}

/**
 * Manual test of check-in with sample data
 * Replace with real values from your FRC sheet
 */
function testCheckInManually() {
  // TODO: Replace these with actual values from your FRC sheet
  const result = checkInGuest({
    zip: '12345',      // Replace with real ZIP
    gender: 'man',     // Replace with real gender
    dob: '03/15'       // Replace with real birthday
  });
  
  Logger.log('Check-in test result:');
  Logger.log(JSON.stringify(result, null, 2));
  
  SpreadsheetApp.getUi().alert(
    'Check-In Test Result',
    JSON.stringify(result, null, 2),
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ============================================================================
// DOCUMENTATION FUNCTIONS (to be expanded)
// ============================================================================

function generateMasterDesc() {
  SpreadsheetApp.getUi().alert(
    '📊 Master Description',
    'This feature will generate comprehensive documentation of all sheets.\n\n' +
    'Coming in next build phase...',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

function viewToolRegistry() {
  SpreadsheetApp.getUi().alert(
    '🔍 Tool Registry',
    'This feature will show all function executions and lineage.\n\n' +
    'Coming in next build phase...',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ============================================================================
// PHASE 2: CHECK-IN FUNCTIONS
// ============================================================================

/**
 * Check in guest using ZIP, Gender, and Birthday
 * Called from CheckInInterface.html
 * 
 * Can accept either:
 * 1. Three separate parameters: checkInGuest(zip, gender, dob)
 * 2. One object parameter: checkInGuest({zip, gender, dob})
 */
function checkInGuest(zipOrPayload, gender, dob) {
  Logger.log('=== CHECK-IN STARTED ===');
  Logger.log('Arguments received:');
  Logger.log('  Arg 0 (zipOrPayload): ' + JSON.stringify(zipOrPayload));
  Logger.log('  Arg 1 (gender): ' + gender);
  Logger.log('  Arg 2 (dob): ' + dob);
  Logger.log('  Total arguments: ' + arguments.length);
  
  let zipCode, genderValue, birthday;
  
  try {
    // Determine if we got an object or separate parameters
    if (arguments.length === 3) {
      // Called with separate parameters: checkInGuest(zip, gender, dob)
      zipCode = String(zipOrPayload || '').trim();
      genderValue = String(gender || '').trim();
      birthday = String(dob || '').trim();
      Logger.log('📌 Using separate parameters mode');
    } else if (arguments.length === 1 && typeof zipOrPayload === 'object' && zipOrPayload !== null) {
      // Called with object: checkInGuest({zip, gender, dob})
      zipCode = String(zipOrPayload.zip || '').trim();
      genderValue = String(zipOrPayload.gender || '').trim();
      birthday = String(zipOrPayload.dob || '').trim();
      Logger.log('📌 Using object parameter mode');
    } else {
      Logger.log('❌ ERROR: Invalid parameters');
      return {
        ok: false,
        message: 'Invalid request format. Please try again.'
      };
    }
    
    Logger.log(`✅ Extracted values: ZIP="${zipCode}", Gender="${genderValue}", DOB="${birthday}"`);
    
    if (!zipCode || !genderValue || !birthday) {
      Logger.log('❌ Missing required fields');
      return {
        ok: false,
        message: 'Missing required fields: ZIP code, gender, and birthday are required'
      };
    }
    
    const sheet = getFRCSheet();
    const data = sheet.getDataRange().getValues();
    
    Logger.log(`📊 Sheet has ${data.length} rows`);
    
    // Normalize birthday with leading zeros (e.g., 3/5 -> 03/05)
    const birthdayParts = birthday.split('/');
    let normalizedBirthday;
    if (birthdayParts.length >= 2) {
      const month = parseInt(birthdayParts[0], 10);
      const day = parseInt(birthdayParts[1], 10);
      normalizedBirthday = String(month).padStart(2, '0') + '/' + String(day).padStart(2, '0');
    } else {
      normalizedBirthday = birthday;
    }
    
    Logger.log(`🔍 Searching for: ZIP="${zipCode}", Gender="${genderValue}", Birthday="${normalizedBirthday}"`);
    
    // Search for matching guest (skip header row)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowBirthdayRaw = row[CONFIG.COL.BIRTHDAY];
      const rowZip = String(row[CONFIG.COL.ZIP] || '').trim();
      const rowGender = String(row[CONFIG.COL.GENDER] || '').trim();
      const rowScreenName = String(row[CONFIG.COL.SCREEN_NAME] || '').trim();
      const rowUID = String(row[CONFIG.COL.UID] || '').trim();
      
      // Normalize row birthday (handle both Date objects and strings)
      let normalizedRowBirthday;
      if (rowBirthdayRaw instanceof Date) {
        const month = rowBirthdayRaw.getMonth() + 1;
        const day = rowBirthdayRaw.getDate();
        normalizedRowBirthday = String(month).padStart(2, '0') + '/' + String(day).padStart(2, '0');
      } else {
        const rowBirthday = String(rowBirthdayRaw || '').trim();
        const rowParts = rowBirthday.split('/');
        if (rowParts.length >= 2) {
          const month = parseInt(rowParts[0], 10);
          const day = parseInt(rowParts[1], 10);
          normalizedRowBirthday = String(month).padStart(2, '0') + '/' + String(day).padStart(2, '0');
        } else {
          normalizedRowBirthday = rowBirthday;
        }
      }
      
      // Check for match
      if (rowZip === zipCode &&
          rowGender.toLowerCase() === genderValue.toLowerCase() &&
          normalizedRowBirthday === normalizedBirthday) {

        Logger.log(`✅ MATCH FOUND at row ${i+1}: ${rowScreenName} (${rowUID})`);

        // Simply return guest info - no check-in status needed since analytics run on all guests
        return {
          ok: true,
          message: 'Welcome, ' + rowScreenName + '!',
          screenName: rowScreenName,
          uid: rowUID,
          photoUrl: row[CONFIG.COL.PHOTO_URL] || ''
        };
      }
    }
    
    // No match found
    Logger.log('❌ No matching guest found');
    Logger.log(`Searched ${data.length - 1} guest records`);
    return {
      ok: false,
      message: 'Guest not found. Please verify your ZIP code, gender, and birthday match your registration.'
    };
    
  } catch (error) {
    Logger.log('❌ ERROR: ' + error.toString());
    Logger.log('Stack: ' + error.stack);
    return {
      ok: false,
      message: 'System error: ' + error.message
    };
  }
}

/**
 * Update a guest's screen name
 * Called from CheckInInterface.html
 * 
 * Can accept either:
 * 1. Two separate parameters: updateGuestScreenName(uid, newScreenName)
 * 2. One object parameter: updateGuestScreenName({uid, newScreenName})
 */
function updateGuestScreenName(uidOrPayload, newScreenName) {
  Logger.log('=== UPDATE SCREEN NAME ===');
  Logger.log('Arguments: ' + JSON.stringify(arguments));
  
  let uid, screenName;
  
  try {
    if (arguments.length === 2) {
      // Separate parameters
      uid = String(uidOrPayload || '').trim();
      screenName = String(newScreenName || '').trim();
    } else if (arguments.length === 1 && typeof uidOrPayload === 'object') {
      // Object parameter
      uid = String(uidOrPayload.uid || '').trim();
      screenName = String(uidOrPayload.newScreenName || '').trim();
    } else {
      return {ok: false, message: 'Invalid parameters'};
    }
    
    if (!uid || !screenName) {
      return {
        ok: false,
        message: 'UID and new screen name are required'
      };
    }
    
    if (screenName.length < 3 || screenName.length > 50) {
      return {
        ok: false,
        message: 'Screen name must be 3-50 characters'
      };
    }
    
    const sheet = getFRCSheet();
    const data = sheet.getDataRange().getValues();
    
    // Find guest by UID
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][CONFIG.COL.UID] || '').trim() === uid) {
        const targetRow = i + 1;
        
        Logger.log(`Updating screen name for row ${targetRow}`);
        
        // Update Column Y (Screen Name) - add 1 for 1-indexed
        sheet.getRange(targetRow, CONFIG.COL.SCREEN_NAME + 1).setValue(screenName);
        SpreadsheetApp.flush();
        
        Logger.log(`✓ Screen name updated to: ${screenName}`);
        
        return {
          ok: true,
          message: 'Screen name updated successfully!',
          newScreenName: screenName
        };
      }
    }
    
    return {ok: false, message: 'Guest not found'};
    
  } catch (error) {
    Logger.log('❌ ERROR: ' + error.toString());
    return {ok: false, message: 'Update failed: ' + error.message};
  }
}

/**
 * Upload guest photo to Google Drive
 * Called from CheckInInterface.html
 * 
 * Can accept either:
 * 1. Four separate parameters: uploadGuestPhoto(uid, fileName, mimeType, base64Data)
 * 2. One object parameter: uploadGuestPhoto({uid, fileName, mimeType, base64Data})
 */
function uploadGuestPhoto(uidOrPayload, fileName, mimeType, base64Data) {
  Logger.log('=== PHOTO UPLOAD ===');
  
  let uid, name, mime, data;
  
  try {
    if (arguments.length === 4) {
      // Separate parameters
      uid = uidOrPayload;
      name = fileName;
      mime = mimeType;
      data = base64Data;
    } else if (arguments.length === 1 && typeof uidOrPayload === 'object') {
      // Object parameter
      uid = uidOrPayload.uid;
      name = uidOrPayload.fileName;
      mime = uidOrPayload.mimeType;
      data = uidOrPayload.base64Data;
    } else {
      return {ok: false, message: 'Invalid parameters'};
    }
    
    if (!uid || !name || !mime || !data) {
      return {ok: false, message: 'Missing required upload parameters'};
    }
    
    if (!mime.startsWith('image/')) {
      return {ok: false, message: 'Only image files are allowed'};
    }
    
    // Get or create Guest Photos folder
    let folder;
    try {
      folder = DriveApp.getFolderById(CONFIG.PHOTO_FOLDER_ID);
      Logger.log('Found Guest Photos folder');
    } catch (e) {
      const folders = DriveApp.getFoldersByName('Guest Photos');
      folder = folders.hasNext() ? folders.next() : DriveApp.createFolder('Guest Photos');
      Logger.log('Created Guest Photos folder');
    }
    
    const uniqueFileName = `${uid}_${name}`;
    
    // Delete old photo if exists
    const existingFiles = folder.getFilesByName(uniqueFileName);
    while (existingFiles.hasNext()) {
      existingFiles.next().setTrashed(true);
      Logger.log('Deleted old photo');
    }
    
    // Upload new photo
    const decodedData = Utilities.base64Decode(data);
    const blob = Utilities.newBlob(decodedData, mime, uniqueFileName);
    const file = folder.createFile(blob);
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    const fileUrl = file.getUrl();
    
    Logger.log(`Photo uploaded: ${fileUrl}`);
    
    // Update FRC sheet with photo URL
    const sheet = getFRCSheet();
    const sheetData = sheet.getDataRange().getValues();
    
    for (let i = 1; i < sheetData.length; i++) {
      if (String(sheetData[i][CONFIG.COL.UID] || '').trim() === uid) {
        const targetRow = i + 1;
        sheet.getRange(targetRow, CONFIG.COL.PHOTO_URL + 1).setValue(fileUrl);
        SpreadsheetApp.flush();
        Logger.log(`✓ Photo URL saved to row ${targetRow}`);
        break;
      }
    }
    
    return {
      ok: true,
      message: 'Photo uploaded successfully!',
      fileUrl: fileUrl
    };
    
  } catch (error) {
    Logger.log('❌ ERROR: ' + error.toString());
    return {ok: false, message: 'Upload failed: ' + error.message};
  }
}



// ============================================================================
// FV (FARM & VILLAGERS) SUPPORT
// ============================================================================

/**
 * Get active checked-in villagers for FV map display
 * Called by FV.html via google.script.run
 *
 * @returns {object} {success: true, villagers: [{screenName, ddd}, ...]}
 */
/**
 * Get active villagers for map display
 * Returns enhanced data for front-end compatibility
 * Delegates to FVCode for hamlet assignment
 */
function getActiveVillagersForMap() {
  try {
    const guests = getCheckedInGuests();

    // Build RICH villager data with full profile for data-driven interactions
    const villagers = guests
      .filter(g => g.screenName) // Only guests with screen names
      .map(g => ({
        // Core Identity
        uid: g.uid,
        screenName: g.screenName,
        photoUrl: g.photoUrl || '',

        // Personality & Traits
        ddd: g.dddScore || 0,
        socialStance: g.socialStance || 3,
        atWorst: g.atWorst || '',

        // Interests & Preferences
        interests: [g.interest1, g.interest2, g.interest3].filter(Boolean),
        music: g.music || '',
        artist: g.artist || '',
        song: g.song || '',
        recentPurchase: g.recentPurchase || '',

        // Demographics
        zodiac: g.zodiac || '',
        age: g.age || '',
        gender: g.gender || '',
        ethnicity: g.ethnicity || '',
        orientation: g.orientation || '',
        zip: g.zip || '',

        // Professional
        education: g.education || '',
        industry: g.industry || '',
        role: g.role || '',

        // Social
        knowHosts: g.knowHosts || '',
        knownLongest: g.knownLongest || '',
        knowScore: g.knowScore || 0
      }));

    Logger.log(`FV: Found ${villagers.length} total villagers with rich profiles`);

    // Get top compatibility matches for Wedding event
    const topMatches = getTopCompatibilityMatches(villagers);

    return {
      success: true,
      villagers: villagers,
      totalGuests: villagers.length,
      topMatches: topMatches
    };

  } catch (error) {
    Logger.log('ERROR in getActiveVillagersForMap: ' + error.toString());
    return {
      success: false,
      error: error.message,
      villagers: []
    };
  }
}

/**
 * Get top compatibility matches from Guest_Similarity sheet
 * Returns top 5 pairs for use in major events (e.g., Wedding)
 */
function getTopCompatibilityMatches(villagers) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const simSheet = ss.getSheetByName('Guest_Similarity');

    if (!simSheet) {
      Logger.log('⚠️ Guest_Similarity sheet not found - returning empty matches');
      return [];
    }

    const data = simSheet.getDataRange().getValues();
    if (data.length < 2) return [];

    // Build UID to screen name map for current villagers
    const uidMap = {};
    villagers.forEach(v => {
      if (v.uid && v.screenName) {
        uidMap[v.uid] = v.screenName;
      }
    });

    const uids = data[0].slice(1); // First row, skip header
    const matches = [];

    // Scan similarity matrix for high scores
    for (let i = 1; i < data.length; i++) {
      const uid1 = data[i][0];
      const screenName1 = uidMap[uid1];
      if (!screenName1) continue; // Not in current session

      for (let j = 1; j < data[i].length; j++) {
        if (i >= j) continue; // Skip duplicates and self

        const uid2 = uids[j - 1];
        const screenName2 = uidMap[uid2];
        if (!screenName2) continue; // Not in current session

        const similarity = parseFloat(data[i][j]) || 0;

        if (similarity > 0) {
          matches.push({
            uid1: uid1,
            uid2: uid2,
            screenName1: screenName1,
            screenName2: screenName2,
            compatibility: Math.round(similarity)
          });
        }
      }
    }

    // Sort by compatibility descending and return top 5
    matches.sort((a, b) => b.compatibility - a.compatibility);
    return matches.slice(0, 5);

  } catch (error) {
    Logger.log('ERROR in getTopCompatibilityMatches: ' + error.toString());
    return [];
  }
}


/**
 * ============================================================================
 * NEXT BUILD PHASES (placeholders):
 * - Phase 3: Analytics layer (Pan_Master, similarity calculations)
 * - Phase 4: Visualization endpoints (wall data, compatibility matches)
 * - Phase 5: Documentation automation (Master_Desc, Tool_Registry)
 * ============================================================================
 */
