<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Guest Check-In</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    
    .container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      max-width: 500px;
      width: 100%;
      padding: 40px;
    }
    
    h1 {
      color: #333;
      margin-bottom: 10px;
      font-size: 28px;
      text-align: center;
    }
    
    .subtitle {
      color: #666;
      text-align: center;
      margin-bottom: 30px;
      font-size: 14px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      color: #555;
      font-weight: 600;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    input, select {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      font-size: 16px;
      transition: border-color 0.3s;
    }
    
    input:focus, select:focus {
      outline: none;
      border-color: #667eea;
    }
    
    .btn {
      width: 100%;
      padding: 14px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      margin-top: 10px;
    }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
    }
    
    .btn:active {
      transform: translateY(0);
    }
    
    .btn:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
    }
    
    .message {
      padding: 15px;
      border-radius: 10px;
      margin-bottom: 20px;
      display: none;
    }
    
    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    .message.info {
      background: #d1ecf1;
      color: #0c5460;
      border: 1px solid #bee5eb;
    }
    
    .message.warning {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }
    
    .guest-info {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
      display: none;
    }
    
    .guest-info h2 {
      color: #333;
      margin-bottom: 10px;
      font-size: 20px;
    }
    
    .info-row {
      display: flex;
      justify-content: space-between;
      padding: 8px 0;
      border-bottom: 1px solid #e0e0e0;
    }
    
    .info-row:last-child {
      border-bottom: none;
    }
    
    .info-label {
      color: #666;
      font-weight: 600;
    }
    
    .info-value {
      color: #333;
    }
    
    
    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
      display: none;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .help-text {
      font-size: 12px;
      color: #888;
      margin-top: 5px;
    }
    
    .debug-info {
      background: #1a1a1a;
      color: #00ff00;
      padding: 10px;
      border-radius: 5px;
      font-family: monospace;
      font-size: 11px;
      margin-top: 10px;
      display: none;
      white-space: pre-wrap;
      word-break: break-all;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üéâ Guest Check-In</h1>
    <p class="subtitle">Please verify your identity to check in</p>
    
    <div id="message" class="message"></div>
    <div id="spinner" class="spinner"></div>
    <div id="debugInfo" class="debug-info"></div>
    
    <!-- Check-In Form -->
    <form id="checkInForm">
      <div class="form-group">
        <label for="zip">ZIP Code</label>
        <input type="text" id="zip" name="zip" placeholder="12345" maxlength="5" required>
        <div class="help-text">Enter your 5-digit ZIP code</div>
      </div>
      
      <div class="form-group">
        <label for="gender">Gender</label>
        <select id="gender" name="gender" required>
          <option value="">Select your gender</option>
          <option value="man">Man</option>
          <option value="woman">Woman</option>
          <option value="nonbinary">Non-binary</option>
          <option value="other">Other</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="dob">Birthday (MM/DD)</label>
        <input type="text" id="dob" name="dob" placeholder="03/15" maxlength="5" required>
        <div class="help-text">Format: MM/DD (e.g., 03/15)</div>
      </div>
      
      <button type="submit" class="btn" id="checkInBtn">Check In</button>
    </form>
    
    <!-- Guest Info (shown after check-in) -->
    <div id="guestInfo" class="guest-info">
      <h2>‚úÖ Checked In!</h2>
      <div class="info-row">
        <span class="info-label">Screen Name:</span>
        <span class="info-value" id="screenName"></span>
      </div>
      <div class="info-row">
        <span class="info-label">UID:</span>
        <span class="info-value" id="uid"></span>
      </div>
    </div>
  </div>

  <script>
    let currentGuest = null;
    let debugMode = true; // Set to false to hide debug info
    
    function debugLog(message, data) {
      if (!debugMode) return;
      
      const debugDiv = document.getElementById('debugInfo');
      debugDiv.style.display = 'block';
      
      const timestamp = new Date().toLocaleTimeString();
      let logMessage = `[${timestamp}] ${message}`;
      
      if (data !== undefined) {
        logMessage += '\n' + JSON.stringify(data, null, 2);
      }
      
      debugDiv.textContent += logMessage + '\n\n';
      console.log(message, data);
    }
    
    // Check-In Form Handler
    document.getElementById('checkInForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const zip = document.getElementById('zip').value.trim();
      const gender = document.getElementById('gender').value;
      const dob = document.getElementById('dob').value.trim();
      
      // Validate DOB format
      if (!dob.match(/^\d{1,2}\/\d{1,2}$/)) {
        showMessage('Please use MM/DD format for birthday (e.g., 03/15)', 'error');
        return;
      }
      
      debugLog('Form values extracted', {zip, gender, dob});
      
      showSpinner(true);
      showMessage('Checking you in...', 'info');
      
      // CRITICAL FIX: Pass as separate parameters, not as object
      // Google Apps Script doesn't always serialize objects correctly
      debugLog('Calling checkInGuest with separate parameters');
      
      google.script.run
        .withSuccessHandler(onCheckInSuccess)
        .withFailureHandler(onCheckInError)
        .checkInGuest(zip, gender, dob);  // Pass as SEPARATE parameters
    });
    
    function onCheckInSuccess(result) {
      showSpinner(false);
      
      debugLog('Check-in response received', result);
      
      // Handle null or undefined result
      if (!result) {
        showMessage('‚ö†Ô∏è Backend returned no data. Check Apps Script logs for errors.', 'warning');
        debugLog('ERROR: Result is null or undefined');
        return;
      }
      
      // Handle missing 'ok' property
      if (result.ok === undefined) {
        showMessage('‚ö†Ô∏è Invalid response format from backend', 'warning');
        debugLog('ERROR: Response missing "ok" property', result);
        return;
      }
      
      if (result.ok) {
        currentGuest = {
          screenName: result.screenName,
          uid: result.uid
        };
        
        document.getElementById('screenName').textContent = result.screenName || 'N/A';
        document.getElementById('uid').textContent = result.uid || 'N/A';
        
        if (result.alreadyCheckedIn) {
          showMessage(result.message, 'info');
        } else {
          showMessage(result.message, 'success');
        }

        // Hide form, show guest info
        document.getElementById('checkInForm').style.display = 'none';
        document.getElementById('guestInfo').style.display = 'block';
      } else {
        showMessage(result.message || 'Check-in failed. Please try again.', 'error');
      }
    }
    
    function onCheckInError(error) {
      showSpinner(false);
      showMessage('Error: ' + error.message, 'error');
      debugLog('Check-in error', error);
    }

    // Utility Functions
    function showMessage(text, type) {
      const msgDiv = document.getElementById('message');
      msgDiv.textContent = text;
      msgDiv.className = 'message ' + type;
      msgDiv.style.display = 'block';
    }
    
    function showSpinner(show) {
      document.getElementById('spinner').style.display = show ? 'block' : 'none';
    }
  </script>
</body>
</html>
